import telebot
from telebot import types
from time import sleep

bot = telebot.TeleBot('6189669484:AAHjBHycz0bq1s5tvBLC5ky17Iff2Wrk_8U')
STAGE = ''
SIDEBOARD_PIN = '053926'                                                    # –ü–∞—Ä–æ–ª—å –æ—Ç –≤—ã–¥–≤–∏–∂–Ω–æ–≥–æ —è—â–∏–∫–∞ –≤ –≥–æ—Å—Ç–∏–Ω–Ω–æ–π
NIGHTSTAND_PIN = '11:35'                                                    # –ü–∞—Ä–æ–ª—å –æ—Ç —Ç—É–º–±–æ—á–∫–∏ –≤ —Å–ø–∞–ª—å–Ω–µ
BATHROOM_PIN = '—Ä–æ–º–∞ –∫–æ–ª—è –∏–ª—å—è —Å–µ—Ä–≥–µ–π'                                      # –ü–∞—Ä–æ–ª—å –æ—Ç —à–∫–∞—Ñ–∞ –ø–æ–¥ –≤–∞–Ω–Ω–æ–π
CLOSET_PIN = '–ø—Ä–æ—à—É –∏–∑–≤–∏–Ω–∏—Ç—å –º–µ–Ω—è'                                          # –ü–∞—Ä–æ–ª—å –æ—Ç —à–∫–∞—Ñ–∞ –≤ —Å–ø–∞–ª—å–Ω–µ
HALLWAY = 'hallway'                                                         # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–µ—Ä—è–º –ø—Ä–∏—Ö–æ–∂–µ–π
LIVING_ROOM = 'living_closets'                                              # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–µ—Ä—è–º –≥–æ—Å—Ç–∏–Ω–æ–π
BEDROOM = 'sleeping_room'                                                   # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–µ—Ä—è–º —Å–ø–∞–ª—å–Ω–∏
BATHROOM = 'swimming_room'                                                  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–µ—Ä—è–º –≤–∞–Ω–Ω–æ–π
THE_END = 'the_end'                                                         # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ü–æ–≤–∫–µ

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞
last_letter = ['']
end_file = 'my_last_letter.txt'

with open(end_file, 'r', encoding='utf-8') as file:
    for line in file.readlines():
        line = line.strip()
        if line == '***':
            last_letter.append('')
        else:
            last_letter[-1] += ' ' + line

'''
HTML
<i>, <em> - –∫—É—Ä—Å–∏–≤
<b> - –ø–æ–ª—É–∂–∏—Ä–Ω—ã–π
<u> - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
<s> - –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π
<code> - –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞
'''


def bot_print(message, text, html=False):
    if html:
        bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.send_message(message.chat.id, text)


def status_print(message, color, text):
    mess = ''
    if color == 'red':
        mess = 'üî¥ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b> üî¥\n\n'
    elif color == 'yellow':
        mess = 'üü† <b>–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è</b> üü†\n\n'
    elif color == 'green':
        mess = 'üü¢ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω</b> üü¢\n\n'
    mess += text
    bot_print(message, mess, html=True)


@bot.message_handler(commands=['start'])
def start(message):
    global STAGE
    STAGE = 'prolog'
    prolog(message)


@bot.message_handler(commands=['info'])
def info(message):
    bot_print(message, message)


@bot.message_handler(commands=['help'])
def help_user(message):
    mess = f'<code>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å–º–∏ –∫–æ–º–Ω–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞ /.\n' \
           f'–ü—Ä–∏–º–µ—Ä: /hallway</code>'
    bot_print(message, mess, html=True)
    mess = f'<code>–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∏—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n' \
           f'–ü—Ä–∏–º–µ—Ä: –ì–æ—Å—Ç–∏–Ω–Ω–∞—è</code>'
    bot_print(message, mess, html=True)
    mess = f'<code>–í—Å–µ –¥–≤–µ—Ä–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ, –ª–∏–±–æ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n' \
           f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—â–∏—Ç–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –¥–≤–µ—Ä—è–º.</code>'
    bot_print(message, mess, html=True)
    mess = f'<code>–î–≤–µ—Ä–∏ –∏–º–µ—é—Ç 3 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞:\n' \
           f'</code>üî¥<code> - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω, –¥–≤–µ—Ä—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –í–∞—à–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏.\n' \
           f'</code>üü†<code> - –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ø–∏–Ω-–∫–æ–¥–∞, –ª–∏–±–æ –¥–≤–µ—Ä—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞.\n' \
           f'</code>üü¢<code> - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω, –¥–≤–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</code>'
    bot_print(message, mess, html=True)


@bot.message_handler(commands=[HALLWAY])
def hallway(message):
    global STAGE
    STAGE = HALLWAY
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton('–¢—É–∞–ª–µ—Ç'),
               types.KeyboardButton('–í–∞–Ω–Ω–∞—è'),
               types.KeyboardButton('–°–ø–∞–ª—å–Ω—è'),
               types.KeyboardButton('–ì–æ—Å—Ç–∏–Ω–Ω–∞—è'),
               types.KeyboardButton('–ì–∞—Ä–¥–µ—Ä–æ–±'))
    markup.add(*buttons)
    sleep(1)
    bot.send_message(message.chat.id, '<code>HALLWAY —Å—Ç–∞—Ç—É—Å: </code><u>–ê–∫—Ç–∏–≤–µ–Ω</u>\n\n'
                                      '<code>–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ—Ä—å</code>',
                     reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=[LIVING_ROOM])
def living_closets(message):
    global STAGE
    STAGE = LIVING_ROOM
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton('–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫'),
               types.KeyboardButton('–í—ã–¥–≤–∏–∂–Ω–æ–π —è—â–∏–∫'),
               types.KeyboardButton('–ë–∞–ª–∫–æ–Ω'))
    markup.add(*buttons)
    sleep(1)
    bot.send_message(message.chat.id, '<code>LIVING_ROOM —Å—Ç–∞—Ç—É—Å: </code><u>–ê–∫—Ç–∏–≤–µ–Ω</u>\n\n'
                                      '<code>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å</code>',
                     reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=[BEDROOM])
def bedroom(message):
    global STAGE
    STAGE = BEDROOM
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton('–®–∫–∞—Ñ'),
               types.KeyboardButton('–¢—É–º–±–æ—á–∫–∞'))
    markup.add(*buttons)
    sleep(1)
    bot.send_message(message.chat.id, '<code>BEDROOM —Å—Ç–∞—Ç—É—Å: </code><u>–ê–∫—Ç–∏–≤–µ–Ω</u>\n\n'
                                      '<code>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å</code>',
                     reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=[BATHROOM])
def bathroom(message):
    global STAGE
    STAGE = BATHROOM
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton('–ü–æ–ª–∫–∞'),
               types.KeyboardButton('–®–∫–∞—Ñ –ø–æ–¥ –≤–∞–Ω–Ω–æ–π'))
    markup.add(*buttons)
    sleep(1)
    bot.send_message(message.chat.id, '<code>BATHROOM —Å—Ç–∞—Ç—É—Å: </code><u>–ê–∫—Ç–∏–≤–µ–Ω</u>\n\n'
                                      '<code>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å</code>',
                     reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=[THE_END])
def the_end(message):
    global STAGE
    STAGE = THE_END
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton('–î–∞–ª–µ–µ')
    markup.add(button)
    sleep(1)
    bot.send_message(message.chat.id, '', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text(message):
    global STAGE
    if STAGE == 'prolog':
        if message.text in ['–ö—Ç–æ –≤—ã?', '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?', '–ì–¥–µ –≤—ã?']:
            answer_prolog_1(message)
            sleep(1)
            bot_print(message, '–†–∞—Å—Å–∫–∞–∂—É –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–µ, –ø—Ä–æ—à—É –≤–∞—Å, –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ä—è—Å–Ω—è—Ç—å')
            answer_prolog_2(message)
        elif message.text == '–ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–∏—Ü–∏—é?':
            answer_prolog_1(message)
            sleep(1)
            bot.reply_to(message, '–£–∂–µ –≤—ã–∑–≤–∞–ª, –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–¥–∞—Ç—å')
            answer_prolog_2(message)
        elif message.text == '–Ø –Ω–∞ –º–µ—Å—Ç–µ':
            answer_prolog_3(message)
        elif message.text == '–û—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å':
            answer_prolog_4(message)
    elif STAGE == HALLWAY:
        if message.text in ['–¢—É–∞–ª–µ—Ç', '–ì–æ—Å—Ç–∏–Ω–Ω–∞—è']:
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        elif message.text in ['–í–∞–Ω–Ω–∞—è', '–ì–∞—Ä–¥–µ—Ä–æ–±']:
            mess = '<code>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –¥–≤–µ—Ä–∏</code>'
            status_print(message, 'red', mess)
        elif message.text == '–°–ø–∞–ª—å–Ω—è':
            mess = '<code>–í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–µ—Ä—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º</code>'
            status_print(message, 'yellow', mess)
    elif STAGE == LIVING_ROOM:
        if message.text == '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫':
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        elif message.text == '–ë–∞–ª–∫–æ–Ω':
            mess = '<code>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –¥–≤–µ—Ä–∏</code>'
            status_print(message, 'red', mess)
        elif message.text == '–í—ã–¥–≤–∏–∂–Ω–æ–π —è—â–∏–∫':
            mess = '<code>–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥:</code>'
            STAGE = 'sideboard_pin_enter'
            status_print(message, 'yellow', mess)
    elif STAGE == BEDROOM:
        if message.text == '–®–∫–∞—Ñ':
            mess = '<code>–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥:</code>'
            STAGE = 'closet_pin_enter'
            status_print(message, 'yellow', mess)
        elif message.text == '–¢—É–º–±–æ—á–∫–∞':
            mess = '<code>–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥:</code>'
            STAGE = 'nightstand_pin_enter'
            status_print(message, 'yellow', mess)
    elif STAGE == BATHROOM:
        if message.text == '–ü–æ–ª–∫–∞':
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        elif message.text == '–®–∫–∞—Ñ –ø–æ–¥ –≤–∞–Ω–Ω–æ–π':
            mess = '<code>–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥:</code>'
            STAGE = 'bathroom_pin_enter'
            status_print(message, 'yellow', mess)
    elif STAGE == 'sideboard_pin_enter':
        if message.text == SIDEBOARD_PIN:
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        else:
            mess = '<code>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</code>'
            status_print(message, 'red', mess)
        living_closets(message)
    elif STAGE == 'nightstand_pin_enter':
        if message.text == NIGHTSTAND_PIN:
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        else:
            mess = '<code>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</code>'
            status_print(message, 'red', mess)
        bedroom(message)
    elif STAGE == 'closet_pin_enter':
        if message.text.lower() == CLOSET_PIN:
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        else:
            mess = '<code>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</code>'
            status_print(message, 'red', mess)
        bedroom(message)
    elif STAGE == 'bathroom_pin_enter':
        if message.text.lower() == BATHROOM_PIN:
            mess = '<code>–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞</code>'
            status_print(message, 'green', mess)
        else:
            mess = '<code>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</code>'
            status_print(message, 'red', mess)
        bathroom(message)
    elif STAGE == THE_END:
        pass


def prolog(message):
    sleep(2)
    bot_print(message, '–ü—Ä–æ—à—É –≤–∞—Å, –ø–æ–º–æ–≥–∏—Ç–µ!')
    sleep(1)
    bot_print(message, '–ö—Ç–æ –Ω–∏–±—É–¥—å! –ù–∞ –ø–æ–º–æ—â—å!')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = (types.KeyboardButton('–ö—Ç–æ –≤—ã?'),
               types.KeyboardButton('–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'),
               types.KeyboardButton('–ì–¥–µ –≤—ã?'),
               types.KeyboardButton('–ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–∏—Ü–∏—é?'))
    markup.add(*buttons)
    sleep(1)
    bot.send_message(message.chat.id, '–ü–û–ú–û–ì–ò–¢–ï!', reply_markup=markup)


def answer_prolog_1(message):
    sleep(3)
    bot_print(message, '–°–ª–∞–≤–∞ –±–æ–≥—É!')
    sleep(2)
    bot_print(message, '–Ø –≤—ã—Å–ª–∞–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º')
    sleep(1)
    bot_print(message, '–Ω–µ –¥—É–º–∞–ª, —á—Ç–æ –∫—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏—Ç.')


def answer_prolog_2(message):
    sleep(3)
    bot_print(message, '–Ø –∑–∞—Å—Ç—Ä—è–ª –≤ —Å–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ')
    sleep(2)
    bot_print(message, '–ï–ª–µ –¥–æ—Å—Ç–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å')
    sleep(2)
    bot_print(message, ' –ø—Ä–æ—à—É —Å–∫–æ—Ä–µ–µ, –Ω–µ –º–æ–≥—É –¥—ã—à–∞—Ç—å')
    sleep(2)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–Ø –Ω–∞ –º–µ—Å—Ç–µ'))
    bot.send_location(message.chat.id, 60.058286, 30.440842, reply_markup=markup)


def answer_prolog_3(message):
    sleep(3)
    user_id = message.from_user.id
    mess = f'<u><i><code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å </code>Professor<code> –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è </code>' \
           f'{user_id}<code> –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É </code>457<code> –∫–∞–∫ </code>guest</i></u>'
    bot_print(message, mess, html=True)
    sleep(2)
    bot_print(message, '–Ø –¥–æ–±–∞–≤–∏–ª –≤–∞—à id –≤ —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π –º–æ–µ–≥–æ –¥–æ–º–∞.')
    sleep(3)
    bot_print(message, '–¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–≤–µ—Ä–∏ –≤ –º–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞, '
                       '–Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    sleep(2)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å'))
    bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å.', reply_markup=markup)


def answer_prolog_4(message):
    sleep(3)
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    mess = f'<code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name} {user_last_name}.\n' \
           f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—ã–π –¥–æ–º\n' \
           f'–í–∞—à ID: {user_id}</code>'
    status_print(message, 'green', mess)
    sleep(3)
    bot_print(message, '–ò–∑-–∑–∞ —Å–±–æ—è –≤ —Å–∏—Å—Ç–µ–º–µ –¥–æ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–≤–µ—Ç,'
                       ' —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ —ç—Ç–æ–π –∂–µ –ø—Ä–∏—á–∏–Ω–µ —è –∏ –∑–∞—Å—Ç—Ä—è–ª')
    sleep(2)
    bot_print(message, '–°–≤—è–∑—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∞–¥–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.')
    sleep(2)
    bot_print(message, '–ü—Ä–æ—à—É –≤–∞—Å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–æ–º–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –≤—ã–π—Ç–∏.')
    sleep(3)
    mess = f'<code>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /hallway –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å–º–∏ –ø—Ä–∏—Ö–æ–∂–µ–π.\n' \
           f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–∫–∏</code>'
    bot_print(message, mess, html=True)


bot.polling(none_stop=True)
